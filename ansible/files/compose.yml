services:
  frontend:
    image: ghcr.io/mrtgm/mental-frontend:prod
    container_name: frontend-prod
    init: true
    restart: always
    profiles: ["prod"]
    networks:
      - caddy
    environment:
      - ENV=production
      - PORT=${FRONTEND_PROD_PORT}
    depends_on:
      - backend

  backend:
    image: ghcr.io/mrtgm/mental-backend:prod
    container_name: backend-prod
    init: true
    restart: always
    profiles: ["prod"]
    networks:
      - caddy
      - db
    environment:
      - ENV=production
      - PORT=${BACKEND_PROD_PORT}
    depends_on:
      db:
        condition: service_healthy

  frontend-staging:
    image: ghcr.io/mrtgm/mental-frontend:staging
    container_name: frontend-staging
    init: true
    restart: always
    profiles: ["staging"]
    networks:
      - caddy
    environment:
      - ENV=development
      - PORT=${FRONTEND_STAGING_PORT}
    depends_on:
      - backend-staging

  backend-staging:
    image: ghcr.io/mrtgm/mental-backend:staging
    container_name: backend-staging
    init: true
    restart: always
    profiles: ["staging"]
    networks:
      - caddy
      - db
    environment:
      - ENV=development
      - PORT=${BACKEND_STAGING_PORT}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15
    container_name: mental-db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./docker/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_USER: mental
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    networks:
      - db
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mental"]
      interval: 5s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:2
    container_name: mental-caddy
    env_file:
      - ./.env.production
    volumes:
      - ./docker/caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    restart: always
    networks:
      - caddy

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: mental-cloudflared
    restart: always
    command: tunnel --no-autoupdate run
    secrets:
      - tunnel_token
    environment:
      TUNNEL_TOKEN_FILE: /run/secrets/tunnel_token
    networks:
      - caddy
    depends_on:
      - caddy
    dns:
      - 1.1.1.1
      - 8.8.8.8
    healthcheck:
      test: ["CMD-SHELL", "cloudflared tunnel info"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgdata:
  caddy_data:
  caddy_config:

secrets:
  tunnel_token:
    file: ./secrets/cloudflare_tunnel_token
  ssh_token:
    file: ./secrets/cloudflare_ssh_token
  postgres_password:
    file: ./secrets/postgres_password

networks:
  db:
    driver: bridge
    name: db-network

  caddy:
    driver: bridge
    name: caddy-network
